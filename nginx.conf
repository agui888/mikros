worker_processes 1;
events {
    worker_connections 1024;
}

http {
    init_by_lua '
        require "cjson"
        require "resty.redis"
    ';

    server {
        set $home_url 'http://my.host:1234/';
        set $default_redirect_url 'http://google.com/';
        set $redis_host '127.0.0.1';
        set $redis_port 6379;

        listen 1234;

        location ~ ^/(.+) {
            content_by_lua '
                local redis = resty.redis:new()

                redis:set_timeout(1000)
                redis:connect(ngx.var.redis_host, ngx.var.redis_port)
                
                local res, err = redis:get(ngx.var[1])
                if not res or res == ngx.null then
                    return ngx.redirect(ngx.var.default_redirect_url, ngx.HTTP_MOVED_TEMPORARILY)
                end

                ngx.redirect(res, ngx.HTTP_MOVED_TEMPORARILY)
            ';
        }

        location / {
            content_by_lua '
                if not (ngx.req.get_method() == "POST") then
                    return ngx.redirect(ngx.var.default_redirect_url, ngx.HTTP_MOVED_TEMPORARILY)
                end

                ngx.req.read_body()
                local data
                pcall(function () data = cjson.decode(ngx.req.get_body_data()) end)
                local url = data["url"]

                if not url then
                    ngx.say("No URL provided")
                    return ngx.exit(ngx.HTTP_BAD_REQUEST)
                end

                local hash = string.sub(ngx.md5(url), 1, 10)
                local short_url = string.format("%s%s", ngx.var.home_url, hash)
                local redis = resty.redis:new()

                redis:set_timeout(1000)
                redis:connect(ngx.var.redis_host, ngx.var.redis_port)
                local ok, err = redis:set(hash, url)
                if not ok then
                    ngx.say("Unable to generate shortened URL")
                    return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                local result, _ = cjson.encode({original_url = url, short_url = short_url}):gsub("\92", "")
                ngx.say(result)
            ';
        }
    }
}
